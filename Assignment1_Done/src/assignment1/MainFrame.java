/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment1;

import algorithms.AES;
import algorithms.DES;
import algorithms.RSA;
import algorithms.TripleDES;
import files.FileClient;
import files.FileServer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sun.security.pkcs.PKCS9Attribute;

/**
 *
 * @author ThanhNguyen
 */
public class MainFrame extends javax.swing.JFrame {
    private static FileServer fs;
    private static FileClient fc;
    private final static String DES_KEY_SEND_FILE_SERVER ="DES_KEY_SERVER_SEND_FILE.txt";
    private final static String MY_RSA_PRIVATE_KEY = "RSAPrivateSendFile.txt";
    private final static String MY_RSA_PUBLIC_KEY = "RSAPublicSendFile.txt";
    private final static String MY_DES_KEY = "DESKeySendFile.txt";
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame(){
        initComponents();
        this.setTitle("Main");
        this.chAlgorithm.add("DES");
        this.chAlgorithm.add("TripleDES");
        this.chAlgorithm.add("AES");
        this.chAlgorithm.add("RSA");
        try {
            this.txtMyAddress.setText(Inet4Address.getLocalHost().toString());
        } catch (UnknownHostException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblChooseAlgorithm = new javax.swing.JLabel();
        chAlgorithm = new java.awt.Choice();
        btnEncrypt = new java.awt.Button();
        btnDecrypt = new java.awt.Button();
        lblIPaddress = new javax.swing.JLabel();
        txtSendAddress = new javax.swing.JTextField();
        lblIPaddress1 = new javax.swing.JLabel();
        txtSendPort = new javax.swing.JTextField();
        btnConnect = new java.awt.Button();
        btnSendFile = new java.awt.Button();
        lblIPaddress2 = new javax.swing.JLabel();
        txtMyAddress = new javax.swing.JTextField();
        lblIPaddress3 = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        btnStart = new java.awt.Button();
        lblIPaddress4 = new javax.swing.JLabel();
        lblIPaddress5 = new javax.swing.JLabel();
        txtChooseHash1 = new javax.swing.JTextField();
        lblIPaddress6 = new javax.swing.JLabel();
        btnChooseHash1 = new java.awt.Button();
        lblIPaddress7 = new javax.swing.JLabel();
        txtChooseHash2 = new javax.swing.JTextField();
        btnChooseHash2 = new java.awt.Button();
        btnHashing = new java.awt.Button();
        btnGenerateDES = new java.awt.Button();
        btnGenerateRSA = new java.awt.Button();
        lblIPaddress8 = new javax.swing.JLabel();
        lblIPaddress9 = new javax.swing.JLabel();
        txtChooseDES = new javax.swing.JTextField();
        btnChooseDES = new java.awt.Button();
        btnChooseRSAPublic = new java.awt.Button();
        txtChooseRSAPublic = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblChooseAlgorithm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblChooseAlgorithm.setText("Choose algorithm");
        lblChooseAlgorithm.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnEncrypt.setLabel("Encrypt File");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setLabel("Decrypt File");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        lblIPaddress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress.setText("IP Address");
        lblIPaddress.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIPaddress1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress1.setText("port");
        lblIPaddress1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnConnect.setLabel("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnSendFile.setLabel("Send File");
        btnSendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendFileActionPerformed(evt);
            }
        });

        lblIPaddress2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress2.setText("My IP");
        lblIPaddress2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIPaddress3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress3.setText("port");
        lblIPaddress3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnStart.setLabel("Start Server");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        lblIPaddress4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress4.setText("Send File");
        lblIPaddress4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIPaddress5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress5.setText("Server");
        lblIPaddress5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIPaddress6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress6.setText("File 1");
        lblIPaddress6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnChooseHash1.setLabel("Choose");
        btnChooseHash1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseHash1ActionPerformed(evt);
            }
        });

        lblIPaddress7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress7.setText("File 2");
        lblIPaddress7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnChooseHash2.setLabel("Choose");
        btnChooseHash2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseHash2ActionPerformed(evt);
            }
        });

        btnHashing.setLabel("Hashing MD5");
        btnHashing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHashingActionPerformed(evt);
            }
        });

        btnGenerateDES.setLabel("Generate DES Key");
        btnGenerateDES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateDESActionPerformed(evt);
            }
        });

        btnGenerateRSA.setLabel("Generate RSA Key");
        btnGenerateRSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateRSAActionPerformed(evt);
            }
        });

        lblIPaddress8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress8.setText("RSA Public");
        lblIPaddress8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblIPaddress9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIPaddress9.setText("DES Key");
        lblIPaddress9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnChooseDES.setLabel("Choose");
        btnChooseDES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseDESActionPerformed(evt);
            }
        });

        btnChooseRSAPublic.setLabel("Choose");
        btnChooseRSAPublic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseRSAPublicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnHashing, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(213, 213, 213))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblIPaddress9, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtChooseDES, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(btnChooseDES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblChooseAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblIPaddress4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblIPaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSendAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblIPaddress1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(txtSendPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblIPaddress8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtChooseRSAPublic, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(btnChooseRSAPublic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(btnGenerateDES, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(btnGenerateRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(lblIPaddress5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIPaddress2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMyAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lblIPaddress3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIPaddress7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtChooseHash2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(btnDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIPaddress6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtChooseHash1)))
                        .addGap(4, 14, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnChooseHash1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnChooseHash2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37))
                            .addComponent(btnSendFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblChooseAlgorithm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chAlgorithm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDecrypt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                    .addComponent(btnEncrypt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblIPaddress4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblIPaddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(txtSendAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblIPaddress1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtSendPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnSendFile, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtChooseDES, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblIPaddress9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnChooseDES, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblIPaddress6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtChooseHash1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnChooseHash1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblIPaddress8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtChooseRSAPublic, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnChooseRSAPublic, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGenerateDES, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(btnGenerateRSA, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtChooseHash2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblIPaddress7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnChooseHash2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHashing, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblIPaddress5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblIPaddress2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtMyAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblIPaddress3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48))
        );

        btnStart.getAccessibleContext().setAccessibleName("btnStart");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        try {
            // TODO add your handling code here:
            String algorithm = chAlgorithm.getSelectedItem();
            if (algorithm.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please select algorithm!");
            } else {
                switch (algorithm) {
                    case "DES":
                        JFileChooser chooser = new JFileChooser();
                        chooser.setMultiSelectionEnabled(true);
                        chooser.showOpenDialog(null);
                        File[] files = chooser.getSelectedFiles();
                        
                        for (File i : files) {
                            DES des = new DES();
                            SecretKey key = des.Keygenerator();
                            //save key
                            des.WriteKeyEncode(key, "DESKey"+i.getName()+".txt");
                            
                            des.Encrypt(i, key, "DESEncrypted"+i.getName());
                        }
                        JOptionPane.showMessageDialog(null, "Encrypted");
                        break;
                    case "TripleDES":
                        JFileChooser chooser4 = new JFileChooser();
                        chooser4.setMultiSelectionEnabled(true);
                        chooser4.showOpenDialog(null);
                        File[] files4 = chooser4.getSelectedFiles();
                        
                        for (File i : files4) {
                            TripleDES des = new TripleDES();
                            SecretKey key = des.Keygenerator();
                            //save key
                            des.WriteKey(key, "3DESKey"+i.getName()+".txt");
                            
                            des.Encrypt(i, key, "3DESEncrypted"+i.getName());
                        }
                        JOptionPane.showMessageDialog(null, "Encrypted");
                        break;
                    case "AES":
                        JFileChooser chooser1 = new JFileChooser();
                        chooser1.setMultiSelectionEnabled(true);
                        chooser1.showOpenDialog(null);
                        File[] files1 = chooser1.getSelectedFiles();
                        
                        for (File i : files1) {
                            AES aes = new AES();
                            SecretKey key1 = aes.Keygenerator();
                            //save key
                            aes.WriteKey(key1, "AESKey"+i.getName()+".txt");
                            
                            aes.Encrypt(i, key1, "AESEncrypted"+i.getName());
                        }
                        JOptionPane.showMessageDialog(null, "Encrypted");
                        break;
                    case "RSA":
                        JFileChooser chooser2 = new JFileChooser();
                        chooser2.setMultiSelectionEnabled(true);
                        chooser2.showOpenDialog(null);
                        File[] files2 = chooser2.getSelectedFiles();
                        
                        for (File i : files2) {
                            RSA rsa = new RSA();
                            rsa.Keygenerator();
                            //save key
                            rsa.WritePublicKey(rsa.getpublicKey(), "RSAPublic"+i.getName()+".txt");
                            rsa.WritePrivateKey(rsa.getprivateKey(), "RSAPrivate"+i.getName()+".txt");
                            
                            rsa.Encrypt(i, rsa.getpublicKey(), "RSAEncrypted"+i.getName());
                        }
                        JOptionPane.showMessageDialog(null, "Encrypted");
                        break;
                        
                    default:
                        throw new AssertionError();
                }
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidAlgorithmParameterException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            String algorithm = chAlgorithm.getSelectedItem();
            if (algorithm.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please select algorithm!");
            } else {
                switch (algorithm) {
                    case "DES":
                        JFileChooser chooser = new JFileChooser();
                        chooser.setMultiSelectionEnabled(true);
                        chooser.showOpenDialog(null);
                        File[] files = chooser.getSelectedFiles();
                        
                        for (File i : files) {
                            DES des = new DES();
                            SecretKey key;
                            //save key
                            key = des.ReadKeyEncode(i.getName().replaceAll("DESEncrypted", "DESKey")+".txt");
                            
                            des.Decrypt(i, key, "DESDecrypted"+i.getName().replaceAll("DESEncrypted", ""));
                        }
                        JOptionPane.showMessageDialog(null, "Decrypted");
                        break;
                    case "TripleDES":
                        JFileChooser chooser4 = new JFileChooser();
                        chooser4.setMultiSelectionEnabled(true);
                        chooser4.showOpenDialog(null);
                        File[] files4 = chooser4.getSelectedFiles();
                        
                        for (File i : files4) {
                            TripleDES des = new TripleDES();
                            SecretKey key;
                            //save key
                            key = des.ReadKey(i.getName().replaceAll("3DESEncrypted", "3DESKey") +".txt");
                            
                            des.Decrypt(i, key, "3DESDecrypted"+i.getName().replaceAll("3DESEncrypted", ""));
                        }
                        JOptionPane.showMessageDialog(null, "Decrypted");
                        break;
                    case "AES":
                        JFileChooser chooser1 = new JFileChooser();
                        chooser1.setMultiSelectionEnabled(true);
                        chooser1.showOpenDialog(null);
                        File[] files1 = chooser1.getSelectedFiles();
                        
                        for (File i : files1) {
                            AES aes = new AES();
                            SecretKey key1;
                            //save key
                            key1 = aes.ReadKey(i.getName().replaceAll("AESEncrypted", "AESKey") +".txt");
                            
                            aes.Decrypt(i, key1, "AESDecrypted"+i.getName().replaceAll("AESEncrypted", ""));
                        }
                        JOptionPane.showMessageDialog(null, "Decrypted");
                        break;
                    case "RSA":
                        JFileChooser chooser2 = new JFileChooser();
                        chooser2.setMultiSelectionEnabled(true);
                        chooser2.showOpenDialog(null);
                        File[] files2 = chooser2.getSelectedFiles();
                        
                        for (File i : files2) {
                            RSA rsa = new RSA();                            
                            rsa.Decrypt(i, rsa.ReadPrivateKey("RSAPrivate"+i.getName().replaceAll("RSAEncrypted", "")+".txt"), "RSADecrypted"+i.getName().replaceAll("RSAEncrypted", ""));
                        }
                        JOptionPane.showMessageDialog(null, "Decrypted");
                        break;
                        
                    default:
                        throw new AssertionError();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        String PORT_SERVER = txtServerPort.getText();
        fs = new FileServer(Integer.valueOf(PORT_SERVER));
	fs.start();
        System.out.println(PORT_SERVER + " started");
        JOptionPane.showMessageDialog(null, "Server started");
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        String sendIpAddr = txtSendAddress.getText();
        String sendPort = txtSendPort.getText();
        File file = new File(this.txtChooseRSAPublic.getText());
        FileClient fc = new FileClient(sendIpAddr, Integer.valueOf(sendPort), file.getName());
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnChooseHash1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseHash1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(null);
        File file = chooser.getSelectedFile();
        this.txtChooseHash1.setText(file.getAbsolutePath());
    }//GEN-LAST:event_btnChooseHash1ActionPerformed

    private void btnChooseHash2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseHash2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(null);
        File file = chooser.getSelectedFile();
        this.txtChooseHash2.setText(file.getAbsolutePath());
    }//GEN-LAST:event_btnChooseHash2ActionPerformed

    private void btnHashingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHashingActionPerformed
        // TODO add your handling code here:
        //Create checksum for this file
        File file1 = new File(this.txtChooseHash1.getText());

        //Use MD5 algorithm 1 ****************
        MessageDigest md5Digest1 = null;
        try {
            md5Digest1 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Get the checksum
        String checksum1 = "";
        try {
            checksum1 = getFileChecksum(md5Digest1, file1);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //see checksum
        System.out.println(checksum1);
        
        File file2 = new File(this.txtChooseHash2.getText());

        //Use MD5 algorithm 2 ******************
        MessageDigest md5Digest2 = null;
        try {
            md5Digest2 = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Get the checksum
        String checksum2 = "";
        try {
            checksum2 = getFileChecksum(md5Digest2, file2);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //see checksum
        System.out.println(checksum2);
        JOptionPane.showMessageDialog(null, file1.getName()+": "+checksum1 +"\n"+ file2.getName()+": "+checksum2 +"\n" );
    }//GEN-LAST:event_btnHashingActionPerformed

    private void btnGenerateDESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateDESActionPerformed
        // TODO add your handling code here:
        DES des = new DES();
        SecretKey key = null;
        try {
            key = des.Keygenerator();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            //save key
            des.WriteKeyEncode(key, MY_DES_KEY);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenerateDESActionPerformed

    private void btnGenerateRSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateRSAActionPerformed
        try {                                               
            // TODO add your handling code here:
            RSA rsa = new RSA();
            try {
                rsa.Keygenerator();
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidAlgorithmParameterException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //save key
            rsa.WritePublicKey(rsa.getpublicKey(), MY_RSA_PUBLIC_KEY);
            rsa.WritePrivateKey(rsa.getprivateKey(), MY_RSA_PRIVATE_KEY);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenerateRSAActionPerformed

    private void btnChooseDESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseDESActionPerformed
        try {
            // TODO add your handling code here:
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File file = chooser.getSelectedFile();
            this.txtChooseDES.setText(file.getAbsolutePath());
            RSA rsa = new RSA();
            rsa.Decrypt(file, rsa.ReadPrivateKey(MY_RSA_PRIVATE_KEY), DES_KEY_SEND_FILE_SERVER);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnChooseDESActionPerformed

    private void btnChooseRSAPublicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseRSAPublicActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File file = chooser.getSelectedFile();
        this.txtChooseRSAPublic.setText(file.getAbsolutePath());
    }//GEN-LAST:event_btnChooseRSAPublicActionPerformed

    private void btnSendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendFileActionPerformed
        try {
            // TODO add your handling code here:
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            File file = chooser.getSelectedFile();
            
            DES des = new DES();
            SecretKey key;
            //save key
            key = des.ReadKeyEncode(DES_KEY_SEND_FILE_SERVER);
            des.Encrypt(file, key, "DESEncrypted"+file.getName());
            

            //Use MD5 algorithm ****************
            MessageDigest md5Digest = null;
            md5Digest = MessageDigest.getInstance("MD5");
            //Get the checksum
            String checksum = "";
            checksum = getFileChecksum(md5Digest, file);
            //see checksum
            System.out.println(checksum);
            
            //get IP and port
            String sendIpAddr = txtSendAddress.getText();
            String sendPort = txtSendPort.getText();
            FileClient fc = new FileClient(sendIpAddr, Integer.valueOf(sendPort), "DESEncrypted"+file.getName());
            
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
                       
    }//GEN-LAST:event_btnSendFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    private static String getFileChecksum(MessageDigest digest, File file) throws IOException{
        //Get file input stream for reading the file content
        FileInputStream fis = new FileInputStream(file);

        //Create byte array to read data in chunks
        byte[] byteArray = new byte[1024];
        int bytesCount = 0; 

        //Read file data and update in message digest
        while ((bytesCount = fis.read(byteArray)) != -1) {
            digest.update(byteArray, 0, bytesCount);
        };

        //close the stream; We don't need it now.
        fis.close();

        //Get the hash's bytes
        byte[] bytes = digest.digest();

        //This bytes[] has bytes in decimal format;
        //Convert it to hexadecimal format
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< bytes.length ;i++)
        {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }

        //return complete hash
       return sb.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnChooseDES;
    private java.awt.Button btnChooseHash1;
    private java.awt.Button btnChooseHash2;
    private java.awt.Button btnChooseRSAPublic;
    private java.awt.Button btnConnect;
    private java.awt.Button btnDecrypt;
    private java.awt.Button btnEncrypt;
    private java.awt.Button btnGenerateDES;
    private java.awt.Button btnGenerateRSA;
    private java.awt.Button btnHashing;
    private java.awt.Button btnSendFile;
    private java.awt.Button btnStart;
    private java.awt.Choice chAlgorithm;
    private javax.swing.JLabel lblChooseAlgorithm;
    private javax.swing.JLabel lblIPaddress;
    private javax.swing.JLabel lblIPaddress1;
    private javax.swing.JLabel lblIPaddress2;
    private javax.swing.JLabel lblIPaddress3;
    private javax.swing.JLabel lblIPaddress4;
    private javax.swing.JLabel lblIPaddress5;
    private javax.swing.JLabel lblIPaddress6;
    private javax.swing.JLabel lblIPaddress7;
    private javax.swing.JLabel lblIPaddress8;
    private javax.swing.JLabel lblIPaddress9;
    private javax.swing.JTextField txtChooseDES;
    private javax.swing.JTextField txtChooseHash1;
    private javax.swing.JTextField txtChooseHash2;
    private javax.swing.JTextField txtChooseRSAPublic;
    private javax.swing.JTextField txtMyAddress;
    private javax.swing.JTextField txtSendAddress;
    private javax.swing.JTextField txtSendPort;
    private javax.swing.JTextField txtServerPort;
    // End of variables declaration//GEN-END:variables
}
